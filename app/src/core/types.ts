export type Stats = { str: number; int: number; agi: number; spr: number; hp?: number; speed?: number };

export type DifficultyRank = 'H' | 'G' | 'F' | 'E' | 'D' | 'C' | 'B' | 'A' | 'S'
export type JobKind = 'Find' | 'Deliver' | 'Escort' | 'Protect' | 'Kill'
export type TargetKind = 'Person' | 'Monster' | 'Item' | 'Location'

export type BattleActor = {
  id: string;
  name: string;
  hp: number;
  hpMax: number;
  mp?: number;
  mpMax?: number;
  // lightweight power for damage calc
  power?: number;
}

export type BattleState = {
  missionId: string;
  questName: string;
  diff: number;
  wave: number; // current wave index starting at 1
  wavesTotal: number;
  allies: BattleActor[];
  enemies: BattleActor[];
  turnSide: 'ally' | 'enemy';
  turnIndex: number; // index within current side
  log: string[];
}

export type Member = {
  id: string;
  name: string;
  class: string;
  personality: string;
  gender?: 'male' | 'female';
  appearance?: string;
  avatar?: string | null;
  upkeep: number;
  stats: Stats;
  hpMax: number;
  hp: number;
  mpMax?: number;
  mp?: number;
  speed: number;
  skills: string[];
  isPlayer?: boolean;
  // Equipment and inventory
  items?: InventoryItem[]; // max 12, references to catalog items
  fedOnDay?: number; // breakfast day marker
  // Progression
  baseLevel?: number;
  baseExp?: number;
  classLevel?: number;
  classExp?: number;
  skillLevels?: Record<string, number>;
  skillExp?: Record<string, number>;
  alive?: boolean;
};

export type Candidate = {
  id: string;
  name: string;
  class: string;
  personality: string;
  gender?: 'male' | 'female';
  appearance?: string;
  avatar?: string | null;
  stats: Stats;
  upkeep: number;
  skills: string[];
  weekAppeared: number;
  expiresOnWeek: number;
  // Temporary: starter inventory for preview/acceptance
  starterItems?: InventoryItem[];
};

export type Quest = {
  id: string;
  name: string;
  desc?: string;
  diff: number;
  rank?: DifficultyRank;
  reward: number;
  fame: number;
  day: number;
  expiresOnDay: number;
  daysRequired?: number;
  type?: 'Beginner' | 'Combat' | 'Exploration' | 'Magic' | 'Political' | 'Legendary' | 'Comedic';
  tags?: string[];
  emoji?: string;
  job?: JobKind;
  target?: TargetKind;
  assigned?: Member[];
};

export type ExpiredQuest = {
  id: string;
  name: string;
  expiredOnDay: number;
};

export type ExpiredCandidate = {
  id: string;
  name: string;
  class: string;
  expiredOnWeek: number;
  weekAppeared?: number;
  gender?: 'male' | 'female';
  appearance?: string;
  avatar?: string | null;
  stats?: Stats;
  upkeep?: number;
  personality?: string;
};

export type ItemCategory = 'food' | 'potion' | 'weapon'

export type ShopItem = {
  id: string;
  name: string;
  desc?: string;
  price: number;
  category: ItemCategory;
  sprite: { row: number; col: number };
  // Optional: items crafted from custom tilesets can carry their image URL
  tilesetUrl?: string;
  // Optional: flag to mark whether the item should appear in the store
  sellable?: boolean;
  // Optional: stack quantity (defaults to 1 if omitted)
  qty?: number;
  apply(state: GameState): void;
};

export type InventoryItem = {
  id: string; // references ShopItem.id in itemsCatalog
  qty?: number; // stack size; defaults to 1
  // future dynamic fields (durability, enchantments, bound flags, etc.) can live here
}

// Tileset JSON format (as generated by scripts/generate-tileset-json.js)
export type TilesetSprite = {
  id: string;
  row: number;
  col: number;
  x: number;
  y: number;
  width: number;
  height: number;
  backgroundImage: string; // e.g. url(/items/tileset_1.png)
  backgroundPosition: string; // e.g. -1px -1px
  backgroundRepeat: 'no-repeat';
  imageRendering: 'pixelated';
}

export type TilesetJSON = {
  tileset: string; // basename
  imagePath: string; // public URL (e.g. /items/tileset_1.png)
  constants: { TILE_SIZE: number; OFFSET: { x: number; y: number }; PADDING: { x: number; y: number } };
  image: { width: number; height: number };
  grid: { cols: number; rows: number };
  sprites: TilesetSprite[];
}

export type GameState = {
  day: number;
  week: number;
  money: number;
  notoriety: number;
  members: Member[];
  candidates: Candidate[];
  quests: Quest[];
  activeMissions: ActiveMission[];
  battle?: BattleState | null;
  inventory: ShopItem[];
  shop: ShopItem[]; // derived from itemsCatalog where sellable === true
  itemsCatalog: ShopItem[]; // global registry of all game items
  itemsLoaded?: boolean; // whether the initial catalog load was attempted
  kitchen?: {
    foodStorage: ShopItem[]; // only category === 'food'
    waitingForBreakfast: string[]; // member ids
  };
  logs: { events: string[]; battle: string[] };
  modifiers: {
    upkeepDeltaPerMember: number;
    questSuccessBonus: number; // percentage points
    recruitStatBonus: number;
    shopDiscount?: number;
  };
  settings: { autoAssign: boolean };
  archives: {
    quests: ExpiredQuest[];
    candidates: ExpiredCandidate[];
    fallen: FallenRecord[];
  };
  isGameOver?: boolean;
};

export type ActiveMission = {
  id: string; // links to the quest id
  name: string;
  diff: number;
  rank?: DifficultyRank;
  reward: number;
  fame: number;
  type?: Quest['type'];
  tags?: string[];
  emoji?: string;
  job?: JobKind;
  target?: TargetKind;
  battlesPlanned?: number; // total waves planned for this mission
  battlesRemaining?: number; // waves remaining to fight in this mission
  battlesCleared?: number; // waves cleared so far
  dayStarted: number;
  endOnDay: number;
  party: Member[];
  log: string[];
};

export type FallenRecord = {
  id: string;
  name: string;
  class: string;
  diedOnDay: number;
  cause: string;
  level?: number;
};


